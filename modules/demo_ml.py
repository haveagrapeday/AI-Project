import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

def show():
    st.title("üìä Machine Learning Demo")
    st.write("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡πÑ‡∏´‡∏ô‡πÉ‡∏ô‡∏Æ‡∏≠‡∏Å‡∏ß‡∏≠‡∏ï‡∏™‡πå! üè∞‚ú®")
    
    # üîπ ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏∏‡∏õ‡∏ô‡∏¥‡∏™‡∏±‡∏¢
    st.subheader("üè† ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ö‡πâ‡∏≤‡∏ô‡∏Æ‡∏≠‡∏Å‡∏ß‡∏≠‡∏ï‡∏™‡πå")
    questions = [
        ("‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ú‡∏ä‡∏¥‡∏ç‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢ ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏±‡∏Å‡∏à‡∏∞?", ["‡πÄ‡∏ú‡∏ä‡∏¥‡∏ç‡∏´‡∏ô‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡πâ‡∏≤‡∏´‡∏≤‡∏ç", "‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏™‡∏ï‡∏¥‡∏õ‡∏±‡∏ç‡∏ç‡∏≤", "‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏±‡∏Å‡∏î‡∏µ‡πÅ‡∏•‡∏∞‡∏≠‡∏î‡∏ó‡∏ô", "‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∞‡πÄ‡∏¢‡∏≠‡∏ó‡∏∞‡∏¢‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡∏ä‡∏ô‡∏∞"]),
        ("‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å?", ["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡πâ‡∏≤‡∏´‡∏≤‡∏ç", "‡∏™‡∏ï‡∏¥‡∏õ‡∏±‡∏ç‡∏ç‡∏≤", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏±‡∏Å‡∏î‡∏µ", "‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"]),
        ("‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏Æ‡∏≠‡∏Å‡∏ß‡∏≠‡∏ï‡∏™‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏õ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?", ["‡∏™‡∏ô‡∏≤‡∏°‡∏Ñ‡∏ß‡∏¥‡∏î‡∏î‡∏¥‡∏ä", "‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏∏‡∏î", "‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏±‡πà‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏±‡∏ô‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô", "‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö"]),
        ("‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ß‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡∏°‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏π‡πà‡∏´‡∏π?", ["‡∏™‡∏¥‡∏á‡πÇ‡∏ï", "‡∏ô‡∏Å‡∏Æ‡∏π‡∏Å", "‡πÅ‡∏ö‡∏î‡πÄ‡∏à‡∏≠‡∏£‡πå", "‡∏á‡∏π"])
    ]
    
    responses = []
    for q, options in questions:
        response = st.radio(q, options, key=q)
        responses.append(response)
    
    if st.button("üîÆ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ö‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì!"):
        gryffindor = responses.count("‡πÄ‡∏ú‡∏ä‡∏¥‡∏ç‡∏´‡∏ô‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡πâ‡∏≤‡∏´‡∏≤‡∏ç") + responses.count("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡πâ‡∏≤‡∏´‡∏≤‡∏ç") + responses.count("‡∏™‡∏ô‡∏≤‡∏°‡∏Ñ‡∏ß‡∏¥‡∏î‡∏î‡∏¥‡∏ä") + responses.count("‡∏™‡∏¥‡∏á‡πÇ‡∏ï")
        ravenclaw = responses.count("‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏™‡∏ï‡∏¥‡∏õ‡∏±‡∏ç‡∏ç‡∏≤") + responses.count("‡∏™‡∏ï‡∏¥‡∏õ‡∏±‡∏ç‡∏ç‡∏≤") + responses.count("‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏∏‡∏î") + responses.count("‡∏ô‡∏Å‡∏Æ‡∏π‡∏Å")
        hufflepuff = responses.count("‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏±‡∏Å‡∏î‡∏µ‡πÅ‡∏•‡∏∞‡∏≠‡∏î‡∏ó‡∏ô") + responses.count("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏±‡∏Å‡∏î‡∏µ") + responses.count("‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏±‡πà‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏±‡∏ô‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô") + responses.count("‡πÅ‡∏ö‡∏î‡πÄ‡∏à‡∏≠‡∏£‡πå")
        slytherin = responses.count("‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∞‡πÄ‡∏¢‡∏≠‡∏ó‡∏∞‡∏¢‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡∏ä‡∏ô‡∏∞") + responses.count("‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à") + responses.count("‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö") + responses.count("‡∏á‡∏π")
        
        house_scores = {"Gryffindor": gryffindor, "Ravenclaw": ravenclaw, "Hufflepuff": hufflepuff, "Slytherin": slytherin}
        sorted_houses = sorted(house_scores.items(), key=lambda x: x[1], reverse=True)
        
        st.subheader(f"üèÜ ‡∏ö‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: {sorted_houses[0][0]}!")
        
        st.write("‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏ß‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á! ‚û°Ô∏è")



    # üîπ Load Data Files
    data_path = "datasources/Harry_Potter_Movies"
    df_students = pd.read_csv(os.path.join(data_path, "harry_potter_1000_students.csv"), encoding="latin1")

    # üîπ Clean column names
    df_students.columns = df_students.columns.str.replace(" ", "_").str.strip()
    
    # üîπ 1. Analyze Hogwarts House Traits
    st.subheader("üè∞ Hogwarts House Traits Analysis")
    traits = ["Bravery", "Intelligence", "Loyalty", "Ambition", "Dark_Arts_Knowledge", "Quidditch_Skills", "Dueling_Skills", "Creativity"]
    house_means = df_students.groupby("House")[traits].mean()
    house_colors = {"Gryffindor": "#B22222", "Hufflepuff": "#FFD700", "Ravenclaw": "#4682B4", "Slytherin": "#2E8B57"}
    colors = [house_colors.get(house, "#808080") for house in house_means.index]
    
    fig, ax = plt.subplots(figsize=(10, 6))
    house_means.T.plot(kind="bar", ax=ax, color=colors)
    ax.set_title("Average Traits per Hogwarts House")
    ax.set_ylabel("Average Score")
    ax.legend(title="House")
    st.pyplot(fig)
    

  # üîπ 5. Plot dialogue count
    st.subheader("üìä Character Dialogue Count")
    char_counts = df["Character_Name"].value_counts().head(10)

    fig, ax = plt.subplots()
    sns.barplot(x=char_counts.values, y=char_counts.index, palette="viridis", ax=ax)
    ax.set_xlabel("Dialogue Count")
    ax.set_ylabel("Character Name")
    ax.set_title("Top 10 Characters with Most Dialogues")
    st.pyplot(fig)

    # üîπ 6. Select character to view dialogues
    st.subheader("üîç Select a Character to View Dialogues")
    character_selected = st.selectbox("Select a Character", df["Character_Name"].dropna().unique())
    st.subheader(f"üì¢ Dialogues of {character_selected}")
    st.write(df[df["Character_Name"] == character_selected][["Dialogue"]].head(5))



    # üîπ 2. Display Sample Data
    st.subheader("üîç Sample Data from Harry Potter Students")
    st.write(df_students.head())

    # üîπ 3. Character Personality Traits Demo
    st.subheader("üé≠ Character Personality Traits")
    characters = {
        "Harry Potter": ([8, 7, 6, 5, 2, 9, 6, 4], "Gryffindor"),
        "Hermione Granger": ([5, 10, 5, 4, 1, 2, 5, 8], "Gryffindor"),
        "Ron Weasley": ([6, 3, 8, 3, 2, 6, 4, 5], "Gryffindor"),
        "Draco Malfoy": ([3, 4, 2, 9, 7, 3, 5, 2], "Slytherin"),
        "Albus Dumbledore": ([9, 10, 8, 6, 5, 2, 10, 10], "Gryffindor"),
        "Rubeus Hagrid": ([5, 6, 6, 1, 4, 0, 5, 8], "Gryffindor"),
        "Severus Snape": ([6, 7, 10, 4, 8, 1, 7, 6], "Slytherin"),
        "Voldemort": ([3, 5, 1, 10, 10, 1, 8, 4], "Slytherin"),
        "Minerva McGonagall": ([8, 10, 9, 2, 2, 1, 5, 7], "Slytherin"),
        "Luna Lovegood": ([6, 9, 8, 2, 1, 1, 2, 10], "Ravenclaw"),
        "Gilderoy Lockhart": ([2, 3, 1, 5, 3, 1, 3, 6], "Ravenclaw"),
        "Cedric Diggory": ([5, 2, 3, 7, 1, 8, 6, 3], "Hufflepuff"),
    }
    
    character_names = list(characters.keys())
    selected_character = st.selectbox("Select a Main Character", character_names)
    selected_traits, house = characters[selected_character]
    
    trait_colors = ["#B22222", "#4682B4", "#FFD700", "#2E8B57", "#2E8B57", "#B22222", "#B22222", "#FFD700"]
    
    traits = ["Bravery", "Intelligence", "Loyalty", "Ambition", "Dark Arts Knowledge", "Quidditch Skills", "Dueling Skills", "Creativity"]
    
    fig, ax = plt.subplots()
    sns.barplot(x=selected_traits, y=traits, palette=trait_colors, ax=ax)
    ax.set_xlabel("Trait Score")
    ax.set_ylabel("Trait")
    ax.set_title(f"Personality Traits of {selected_character} ({house})")
    st.pyplot(fig)
