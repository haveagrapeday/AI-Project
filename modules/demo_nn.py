import streamlit as st
import tensorflow as tf
import numpy as np
import random
from tensorflow.keras.preprocessing import image
from PIL import Image
import os

MODEL_PATH = "disney_princess_resnet50.h5"

@st.cache_resource
def load_model():
    try:
        return tf.keras.models.load_model(MODEL_PATH)
    except Exception as e:
        st.error(f"üö® ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        return None

model = load_model()

DATA_DIR = "datasources/princess"
class_labels = sorted(os.listdir(DATA_DIR)) if os.path.exists(DATA_DIR) else []

sample_images = []
if class_labels:
    for label in class_labels:
        label_dir = os.path.join(DATA_DIR, label)
        if os.path.isdir(label_dir):
            images = [os.path.join(label_dir, img) for img in os.listdir(label_dir) if img.endswith((".jpg", ".jpeg", ".png"))]
            if images:
                sample_images.extend([(label, img) for img in images])  # ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ class

def preprocess_image(img):
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    if img.size != (224, 224):
        img = img.resize((224, 224))  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏õ‡πá‡∏ô 224x224

    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô RGB ‡∏´‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡πÄ‡∏õ‡πá‡∏ô RGBA ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∑‡πà‡∏ô
    if img.mode != 'RGB':
        img = img.convert('RGB')

    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0) / 255.0  # ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡πÄ‡∏Å‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô [0, 1]
    return img_array

def show():
    st.title("üßö‚Äç‚ôÄÔ∏è Princess Classifier - Neural Network")
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    if sample_images:
        # ‡∏™‡∏∏‡πà‡∏°‡∏£‡∏π‡∏õ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ç‡∏¥‡∏á Disney ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
        selected_label, selected_image_path = random.choice(sample_images)

        try:
            img = Image.open(selected_image_path)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô .png)
            if selected_image_path.endswith('.png'):
                st.error(f"üö® ‡πÑ‡∏ü‡∏•‡πå {selected_image_path} ‡πÄ‡∏õ‡πá‡∏ô .png ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏≠‡∏∑‡πà‡∏ô.")
                return  # ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ô‡∏µ‡πâ
            
            st.image(img, caption=f"üì∏ ‡∏£‡∏π‡∏õ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {selected_label}", use_container_width=True)
            
            img_array = preprocess_image(img)
            predictions = model.predict(img_array)
            
            if class_labels:
                predicted_class = class_labels[np.argmax(predictions)]
                confidence = np.max(predictions) * 100
                st.write(f"‚ú® ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ç‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ: **{predicted_class}**")
                st.write(f"üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: **{confidence:.2f}%**")
            else:
                st.error("üö® ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• class labels! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå `datasources/princess`")
        
        except Exception as e:
            st.error(f"üö® ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ: {selected_image_path} ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å: {e}")
    
    # ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏£‡∏ô‡∏î‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤
    if "clicked" not in st.session_state or not st.session_state.clicked:
        st.session_state.clicked = True
        st.button("üîÄ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ç‡∏¥‡∏á Disney ‡πÉ‡∏´‡∏°‡πà", on_click=show)

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
show()
