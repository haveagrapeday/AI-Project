import streamlit as st
import tensorflow as tf
import numpy as np
import random
from tensorflow.keras.preprocessing import image
from PIL import Image
import os

MODEL_PATH = "disney_princess_resnet50.h5"

@st.cache_resource
def load_model():
    try:
        return tf.keras.models.load_model(MODEL_PATH)
    except Exception as e:
        st.error(f"üö® ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        return None

model = load_model()

DATA_DIR = "datasources/princess"
class_labels = sorted(os.listdir(DATA_DIR)) if os.path.exists(DATA_DIR) else []

sample_images = []
if class_labels:
    for label in class_labels:
        label_dir = os.path.join(DATA_DIR, label)
        if os.path.isdir(label_dir):
            images = [os.path.join(label_dir, img) for img in os.listdir(label_dir) if img.endswith((".jpg", ".png", ".jpeg"))]
            if images:
                sample_images.extend([(label, img) for img in images])  # ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ class

def preprocess_image(img):
    img = img.resize((224, 224))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0) / 255.0
    return img_array

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô demo_nn ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Demo ‡∏Ç‡∏≠‡∏á Neural Network ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
def demo_nn():
    st.title("üßö‚Äç‚ôÄÔ∏è Princess Classifier - Neural Network")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÉ‡∏ô sample_images ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if sample_images:
        selected_label, selected_image_path = random.choice(sample_images)
        
        img = Image.open(selected_image_path)
        st.image(img, caption=f"üì∏ ‡∏£‡∏π‡∏õ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {selected_label}", use_container_width=True)
        
        img_array = preprocess_image(img)
        predictions = model.predict(img_array)
        
        if class_labels:
            predicted_class = class_labels[np.argmax(predictions)]
            confidence = np.max(predictions) * 100
            st.write(f"‚ú® ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ç‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ: **{predicted_class}**")
            st.write(f"üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: **{confidence:.2f}%**")
        else:
            st.error("üö® ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• class labels! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå `datasources/princess`")
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà
        if st.button("üîÄ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ç‡∏¥‡∏á Disney ‡πÉ‡∏´‡∏°‡πà"):
            demo_nn()  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏´‡∏ô‡πâ‡∏≤ demo_nn ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏Ñ‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ demo_nn
if 'page' in st.session_state and st.session_state.page == 'demo_nn':
    demo_nn()
